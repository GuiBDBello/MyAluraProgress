{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;AAAA,IAAMA,SAAS,CAAC,aAAD,CAAf;AACA,IAAMC,UAAU,CAAhB;AACA,IAAMC,SAAS,YAAf;;AAEA,IAAIC,aAAa,IAAjB;;AAEA,IAAIC,QAAQ,IAAZ;;IAEaC,iB,WAAAA,iB;;;;;;;uCAEM;AACX,kBAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACH;;;wCAEsB;;AAEnB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,4BAAYI,eAAZ,GAA8B,aAAK;;AAE/BT,sCAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,iBAHD;;AAKAR,4BAAYS,SAAZ,GAAwB,aAAK;;AAEzB,wBAAI,CAAChB,UAAL,EAAiB;AACbA,qCAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,gCAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,mCAAWC,KAAX,GAAmB,YAAW;AAC1B,kCAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH,yBAFD;AAGH;;AAEDE,4BAAQL,UAAR;AACH,iBAXD;;AAaAO,4BAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,4BAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,2BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,iBALD;AAMH,aA5BM,CAAP;AA6BH;;;sCAEoBtB,U,EAAY;;AAE7BH,mBAAO0B,OAAP,CAAe,iBAAS;AACpB,oBAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACI1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEJ1B,2BAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,aALD;AAMH;;;0CAEwB;;AAErB,gBAAI7B,UAAJ,EAAgB;AACZC;AACA;AACA;AACAD,6BAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nconst version = 4;\r\nconst dbName = 'aluraframe';\r\n\r\nlet connection = null;\r\n\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n\r\n    construction() {\r\n        throw new Error('Não é possível criar instâncias de ConnectionFactory!');\r\n    }\r\n\r\n    static getConnection() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n            openRequest.onupgradeneeded = e => {\r\n\r\n                ConnectionFactory._createStores(e.target.result);\r\n            };\r\n\r\n            openRequest.onsuccess = e => {\r\n\r\n                if (!connection) {\r\n                    connection = e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function() {\r\n                        throw new Error('Você não pode fechar diretamente a conexão.');\r\n                    }\r\n                }\r\n\r\n                resolve(connection);\r\n            };\r\n\r\n            openRequest.onerror = e => {\r\n\r\n                console.log(e.target.error);\r\n\r\n                reject(e.target.error.name);\r\n            };\r\n        });\r\n    }\r\n\r\n    static _createStores(connection) {\r\n\r\n        stores.forEach(store => {\r\n            if (connection.objectStoreNames.contains(store))\r\n                connection.deleteObjectStore(store);\r\n\r\n            connection.createObjectStore(store, { autoIncrement: true });\r\n        });\r\n    }\r\n    \r\n    static closeConnection() {\r\n\r\n        if (connection) {\r\n            close();\r\n            // ou:\r\n            // Reflect.apply(close, connection, []);\r\n            connection = null;\r\n        }\r\n    }\r\n\r\n}\r\n"]}